from LoadBase import loadGraphs


def extractCallGraphs(inputs):
    functionsData, graphPPreds, graphPSuccs, programs = loadGraphs(inputs)
    return functionsData, graphPPreds, graphPSuccs, programs


def functionCallSimilarity(functionS, predS, succS, neS, functionT, predT, succT, neT):

    V1 = len(functionS)
    V2 = len(functionT)
    
    E1 = neS
    E2 = neT
    
    if 2*abs(V1-V2) >= 0.05 * (V1+V2):
        return 0
    if 2*abs(E1-E2) >= 0.05 * (E1+E2):
        return 0
    
    for uS in functionS:
        outnodes1 = set(succS[uS])
        
        uP = ""
        for uT in functionT:
            if functionT[uT]["name"] == functionS[uS]["name"]:
                uP = uT
                break
         
        if uP == "":
            return 0
         
        outnodes2 = set(succT[uP])
         
        inter = outnodes1.intersection(outnodes2)
        union = outnodes1.union(outnodes2)
         
        if len(inter) <= 0.95 * len(union):
            return 0        
    return 1
